@model HDU_AppXetTuyen.Models.Nganh

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/_Layout_Admin.cshtml";
}
<header class="page-header page-header-compact page-header-light border-bottom bg-white mb-2">
    <div class="container-fluid px-4">
        <div class="page-header-content">
            <div class="row align-items-center justify-content-between pt-3">
                <div class="col-auto mb-1">
                    <div class="page-header-title  mb-2">
                        <div class="page-header-icon"><i data-feather="list"></i></div>
                        <span>Quản lý thông tin Ngành</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</header>

<div class="container-fluid px-12">
    <div class="card card-header-actions">
        <div class="card-header">
            <span>Thêm mới ngành</span>
            <a class="btn-close" aria-label="Close" href="@Url.Action("Index","Nganhs")"></a>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-xl-6">
                    <div class="card card-header-actions mt-1 mb-1 ">
                        <div class="card-header">Thông tin ngành mới</div>
                        <div class="card-body">
                            <div class="form-horizontal">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="row g-2 mb-3">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.Label("Chọn khối ngành", htmlAttributes: new { @class = "control-label col-md-12" })
                                            <div class="col-md-12">
                                                @Html.DropDownList("KhoiNganh_ID", null, htmlAttributes: new { @class = "form-select" })
                                                <span class="field-validation-valid text-danger" id="KhoiNganh_ID_Error" data-valmsg-replace="true"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.Label("Chọn Khoa", htmlAttributes: new { @class = "control-label col-md-12" })
                                            <div class="col-md-12">
                                                @Html.DropDownList("Khoa_ID", null, htmlAttributes: new { @class = "form-select" })
                                                <span class="field-validation-valid text-danger" id="Khoa_ID_Error" data-valmsg-replace="true"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row g-2 mb-3">
                                    <div class="col-md-6">

                                        <div class="form-group">
                                            @Html.Label("Mã ngành", htmlAttributes: new { @class = "control-label col-md-12" })
                                            <div class="col-md-12">
                                                @Html.EditorFor(model => model.Nganh_MaNganh, new { htmlAttributes = new { @class = "form-control" } })
                                                <span class="field-validation-valid text-danger" id="Nganh_MaNganh_Error" data-valmsg-replace="true"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">

                                        <div class="form-group">
                                            @Html.Label("Tên ngành", htmlAttributes: new { @class = "control-label col-md-12" })
                                            <div class="col-md-12">
                                                @Html.EditorFor(model => model.Nganh_TenNganh, new { htmlAttributes = new { @class = "form-control" } })
                                                <span class="field-validation-valid text-danger" id="Nganh_TenNganh_Error" data-valmsg-replace="true"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row g-2 mb-1">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            @Html.Label("Ghi chú", htmlAttributes: new { @class = "control-label col-md-12" })
                                            <div class="col-md-12">
                                                @Html.EditorFor(model => model.Nganh_GhiChu, new { htmlAttributes = new { @class = "form-control" } })
                                                <span class="field-validation-valid text-danger" id="Nganh_GhiChu_Error" data-valmsg-replace="true"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>
                </div>
                <div class="col-xl-6">
                    <div class="card card-header-actions mt-1 mb-1 ">
                        <div class="card-header">Tổ hợp môn xét tuyển của ngành</div>
                        <div class="card-body">
                            <table id="tableToHopMon" class="table table-striped table-hover table-sm">
                                <tbody id="infoList">
                                </tbody>
                            </table>

                            <nav>
                                <ul class="pagination justify-content-center" style="margin-top:0px; margin-bottom:0px">
                                    <li class="page-item disabled">
                                        <a class="page-link small prev" href="#" tabindex="-1">Trước</a>
                                    </li>
                                    <li class="page-item">
                                        <a class="page-link small" id="present_on" href="#"></a>
                                    </li>
                                    <li class="page-item">
                                        <a class="page-link small next" href="#">Sau</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row  mt-1 g-1 align-items-center justify-content-center">
                <hr class="mt-1 mb-1" />
                <div class="col-md-2 col-3">
                    @*<input type="submit" value="Create" class="btn btn-default" />*@
                    @*<input class="btn btn-outline-success" type="submit" value="Đồng ý" style="width:100%" />*@
                    <button class="btn btn-outline-success" style="width:100%" onclick="submitForm()"> Đồng ý </button>
                </div>                
                <div class="col-md-2 col-3">
                    @Html.ActionLink("Hủy bỏ", "Index", null, new { @class = "btn btn-outline-danger", @style = "width:100%; white-space:nowrap" })
                </div>
            </div>
        </div>
    </div>
</div>
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="myToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Toast Title</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
        </div>
    </div>
</div>
<div class="modal" id="loadingModal" tabindex="-1" role="dialog" aria-labelledby="loadingModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $('document').ready(function () {
        loadData()
        var itemsPerPage = 4; // Number of items to display per page
        var currentPage = 1; // Current page
        var present_on = document.getElementById("present_on");
        present_on.innerHTML = 1;
        // Hide all rows except the ones for the current page
        function showRows() {
            var startIndex = (currentPage - 1) * itemsPerPage;
            var endIndex = startIndex + itemsPerPage;

            $(".table tbody tr").hide().slice(startIndex, endIndex).show();
        }

        // Handle next page click event
        $(".next").on("click", function (e) {
            e.preventDefault();
            currentPage++;
            present_on.innerHTML = currentPage;
            showRows();
            updatePaginationState();
        });

        // Handle previous page click event
        $(".prev").on("click", function (e) {
            e.preventDefault();
            if (currentPage > 1) {
                currentPage--;
                present_on.innerHTML = currentPage;
                showRows();
                updatePaginationState();
            }
        });



        // Update pagination state based on current page
        function updatePaginationState() {
            var totalPages = Math.ceil($(".table tbody tr").length / itemsPerPage);

            if (currentPage === 1) {
                $(".prev").parent().addClass("disabled");
            } else {
                $(".prev").parent().removeClass("disabled");
            }

            if (currentPage === totalPages) {
                $(".next").parent().addClass("disabled");
            } else {
                $(".next").parent().removeClass("disabled");
            }
        }

        // Show initial page of rows
        showRows();
        updatePaginationState();

        // Xử lý check box


    })
    function showToast(title, message, bgColor) {
        $("#myToast .toast-header .me-auto").text(title);
        $("#myToast .toast-body").text(message);
        $("#myToast").removeClass("bg-success bg-danger").addClass(bgColor);
        $("#myToast").toast("show");
    }
    function check() {
        var checkboxes = document.querySelectorAll('input[name="checkboxTHM"]');
        var selectedValues = [];
        for (var i = 0; i < checkboxes.length; i++) {
            if (checkboxes[i].checked) {
                selectedValues.push(checkboxes[i].id);
            }
        }
    }
    function loadData() {
        $.ajax({
            url: "/Admin/Nganhs/getAllToHopMon",
            type: "GET",
            contentType: "application/json;charset=utf-8",
            success: function (response) {
                if (response.success) {
                    let htmlString = "";
                    let tohopmons = response.tohops;
                    let count = 0;
                    $.each(tohopmons, function (i, result) {
                        if (result.Thm_ID > 0) {
                            htmlString += '<tr>' +
                                '<td style="vertical-align: middle !important ">' + result.Thm_MaToHop + "&nbsp;" + ' </td> ' +
                                '<td style="vertical-align: middle !important "> ' + result.Thm_TenToHop + ' </td>' +
                                '<td style="width:80px"><div class="form-check"><input name="checkboxTHM" class="form-check-input" type="checkbox" value="' + result.Thm_ID + '" id="' + result.Thm_ID + '"><label class="form-check-label" for="flexCheckDefault"> Chọn </label></div></td>' +
                                '</tr>'
                        }
                    });
                    document.getElementById('infoList').innerHTML = htmlString;
                    var startIndex = 0;
                    var endIndex = startIndex + 4;
                    $(".table tbody tr").hide().slice(startIndex, endIndex).show();
                } else {
                }
            },
            error: function (xhr, status, error) {
                // Handle any errors
                console.error(error);
            }
        });
    }

    function check() {
        var checkboxes = document.querySelectorAll('input[name="checkboxTHM"]');
        var selectedValues = [];
        for (var i = 0; i < checkboxes.length; i++) {
            if (checkboxes[i].checked) {
                selectedValues.push(checkboxes[i].id);
            }
            console.log(selectedValues, 'checkboxTHM')
        }

        let KhoiNganh_ID = $('#KhoiNganh_ID').val();
        let Khoa_ID = $('#Khoa_ID').val();
        let Nganh_MaNganh = $('#Nganh_MaNganh').val();
        let Nganh_TenNganh = $('#Nganh_TenNganh').val();
        let Nganh_GhiChu = $('#Nganh_GhiChu').val();

        console.log(KhoiNganh_ID, 'KhoiNganh_ID')
        console.log(Khoa_ID, 'Khoa_ID')
        console.log(Nganh_MaNganh, 'Nganh_MaNganh')
        console.log(Nganh_TenNganh, 'Nganh_TenNganh')
        console.log(Nganh_GhiChu, 'Nganh_GhiChu')
    }

    function submitForm() {
        $(".text-danger").text("");
        let flag = true;
        let KhoiNganh_ID = $('#KhoiNganh_ID').val();
        let Khoa_ID = $('#Khoa_ID').val();
        let Nganh_MaNganh = $('#Nganh_MaNganh').val();
        let Nganh_TenNganh = $('#Nganh_TenNganh').val();
        let Nganh_GhiChu = $('#Nganh_GhiChu').val();

        if (!KhoiNganh_ID || KhoiNganh_ID == 0 ) {
            var errorMessage = "Vui lòng chọn khối ngành";
            $('#KhoiNganh_ID_Error').text(errorMessage);
            flag = false;
        }
        if (!Khoa_ID || Khoa_ID == 0 ) {
            var errorMessage = "Vui lòng chọn khoa";
            $('#Khoa_ID_Error').text(errorMessage);
            flag = false;
        }
        if (!Nganh_MaNganh) {
            var errorMessage = "Vui lòng nhập mã ngành";
            $('#Nganh_MaNganh_Error').text(errorMessage);
            flag = false;
        }
        if (!Nganh_TenNganh) {
            var errorMessage = "Vui lòng nhập tên ngành";
            $('#Nganh_TenNganh_Error').text(errorMessage);
            flag = false;
        }
        var checkboxes = document.querySelectorAll('input[name="checkboxTHM"]');
        var selectedValuesTHM = [];
        for (var i = 0; i < checkboxes.length; i++) {
            if (checkboxes[i].checked) {
                selectedValuesTHM.push(parseInt(checkboxes[i].id));
            }
        }
        if (selectedValuesTHM.length == 0) {
            var errorMessage = "1 ngành chỉ được chọn 4 tổ hợp môn!";
            showToast("Thất bại", "Xin vui lòng chọn các tổ hợp môn ứng với ngành", "bg-danger");
            flag = false;
        }
        if (selectedValuesTHM.length > 4) {
            var errorMessage = "1 ngành chỉ được chọn 4 tổ hợp môn!";
            showToast("Thất bại", "1 ngành chỉ được chọn 4 tổ hợp môn!", "bg-danger");
            flag = false;
        }
        if (!flag) return;
        $("#loadingModal").modal("show");

        var dataNganh = {
            KhoiNganh_ID: KhoiNganh_ID,
            Khoa_ID: Khoa_ID,
            Nganh_MaNganh: Nganh_MaNganh,
            Nganh_TenNganh: Nganh_TenNganh,
            Nganh_GhiChu: Nganh_GhiChu,
            array_THM: selectedValuesTHM
        }
        console.log(dataNganh, 'dataNganh')
        $.ajax({
            url: "/Admin/Nganhs/CreateData",
            type: "POST",
            data: JSON.stringify(dataNganh),
            contentType: "application/json;charset=utf-8",
            success: function (res) {
                if (res.success == true) {
                    showToast("Thành công", "Thêm mới ngành thành công!", "bg-success");
                    window.location.href = '/Admin/Nganhs/Index';
                } else {
                    showToast("Thất bại", "Cập nhật thông tin thất bại! Vui lòng thử lại!", "bg-error");
                }
            },
            error: function (xhr, status, error) {
            }
        });
    }

</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
